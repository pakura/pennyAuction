<?php
namespace ge\bids\thrift\auction;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class Status {
  const Ok = 0;
  const UnknownError = 1;
  const AuctionEnded = 2;
  const AuctionNotFound = 3;
  const DbError = 4;
  const NotEnoughBids = 5;
  static public $__names = array(
    0 => 'Ok',
    1 => 'UnknownError',
    2 => 'AuctionEnded',
    3 => 'AuctionNotFound',
    4 => 'DbError',
    5 => 'NotEnoughBids',
  );
}

class AuctionInfo {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var double
   */
  public $price = null;
  /**
   * @var string
   */
  public $lastBidder = null;
  /**
   * @var int
   */
  public $timeLeft = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'price',
          'type' => TType::DOUBLE,
          ),
        3 => array(
          'var' => 'lastBidder',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'timeLeft',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['price'])) {
        $this->price = $vals['price'];
      }
      if (isset($vals['lastBidder'])) {
        $this->lastBidder = $vals['lastBidder'];
      }
      if (isset($vals['timeLeft'])) {
        $this->timeLeft = $vals['timeLeft'];
      }
    }
  }

  public function getName() {
    return 'AuctionInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->price);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->lastBidder);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->timeLeft);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AuctionInfo');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->price !== null) {
      $xfer += $output->writeFieldBegin('price', TType::DOUBLE, 2);
      $xfer += $output->writeDouble($this->price);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastBidder !== null) {
      $xfer += $output->writeFieldBegin('lastBidder', TType::STRING, 3);
      $xfer += $output->writeString($this->lastBidder);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timeLeft !== null) {
      $xfer += $output->writeFieldBegin('timeLeft', TType::I64, 4);
      $xfer += $output->writeI64($this->timeLeft);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


